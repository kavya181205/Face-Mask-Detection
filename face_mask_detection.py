# -*- coding: utf-8 -*-
"""Face Mask Detection

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11x1gOjg83c6x5xpL7JsBADRzG90ZNpE4
"""

# ! pip install kaggle

!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json

!kaggle datasets download -d omkargurav/face-mask-dataset

from zipfile import ZipFile
dataset = '/content/face-mask-dataset.zip'
with ZipFile(dataset,'r') as zip:
  zip.extractall()
  print('The dataset is extracted')

"""###  **Importing Libraries**
This cell imports the required Python libraries.  
- `numpy`, `pandas` → data handling  
- `matplotlib`, `seaborn` → visualization  
- `sklearn` or `tensorflow/pytorch` → machine learning models  
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import os
from sklearn.model_selection import train_test_split
import matplotlib.image as mpimg
import cv2
from google.colab.patches import cv2_imshow
from PIL import Image

with_mask_files = os.listdir('/content/data/with_mask')
without_mask_files = os.listdir('/content/data/without_mask')
print('Number of with mask images:', len(with_mask_files))
print('Number of without mask images:', len(without_mask_files))

"""### **Creating Labels**
This cell creates labels:
- `1` for 3725 images with mask
- `0` for 3828 images without mask, then combines them into a single list.  

"""

with_mask_label=[1]*3725
without_mask_label=[0]*3828
label=with_mask_label+without_mask_label
print(len(label))

print(label[0:6])
print(label[-6:])

"""**Displaying images**"""

import tensorflow as tf
from tensorflow.keras.utils import load_img, img_to_array

img=load_img('/content/data/with_mask/with_mask_5.jpg')
img

without_mask_image=load_img('/content/data/without_mask/without_mask_3.jpg')
without_mask_image

"""### Image Loading and Preprocessing  
- This cell loads images from the `with_mask` and `without_mask` folders
- resizes them to 128×128 pixels
- converts them into arrays
- stores them in the `data` list for further processing.  

"""

with_mask_path='/content/data/with_mask/'
without_mask_path='/content/data/without_mask/'
data=[]
for img_file in with_mask_files:
  img=tf.io.read_file(with_mask_path+img_file)
  img=tf.image.decode_image(img,channels=3)
  img=tf.image.resize(img,[128,128])
  img=img.numpy()
  data.append(img)

for img_file in without_mask_files:
  img=tf.io.read_file(without_mask_path+img_file)
  img=tf.image.decode_image(img,channels=3)
  img=tf.image.resize(img,[128,128])
  img=img.numpy()
  data.append(img)

type(data)

data

print("length of data file is:",len(data))

data[0].shape

X=np.array(data)
y=np.array(label)

type(X)

type(y)

"""### **Train-Test Split**  
- This cell splits the dataset into training and testing sets, using 80% for training and 20% for testing, with a fixed random state for reproducibility.  

"""

X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.2,random_state=2)

X_train[0]

X_test

X_train_shaped=X_train/255
X_test_shaped=X_test/255

X_train_shaped[0]

X_test_shaped[0]

"""###  **Building the CNN Model**  
- This cell creates a Sequential Convolutional Neural Network (CNN) with convolution, pooling, dense, and dropout layers to classify images as with mask or without mask.  

"""

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D,MaxPooling2D,Flatten,Dense,Dropout

model=Sequential([
    Conv2D(32,kernel_size=(3,3),activation='relu',input_shape=(128,128,3)),
    MaxPooling2D(pool_size=(2,2)),
    Conv2D(64,kernel_size=(3,3),activation='relu'),
    MaxPooling2D(pool_size=(2,2)),
    Flatten(),
    Dense(128,activation='relu'),
    Dropout(0.5),
    Dense(64,activation='relu'),
    Dropout(0.5),
    Dense(2,activation='sigmoid')])

"""### **Compiling the Model**  
- This cell compiles the CNN using the Adam optimizer, sparse categorical cross-entropy loss, and accuracy as the evaluation metric.  

"""

model.compile(optimizer='adam',loss='sparse_categorical_crossentropy',metrics=['accuracy'])

"""### **Training the Model**  
This cell trains the CNN for 5 epochs using the training data and evaluates performance on the validation set.  

"""

history=model.fit(X_train_shaped,y_train,epochs=5,validation_data=(X_test_shaped,y_test))

loss, accuracy = model.evaluate(X_test_shaped, y_test)
print('Test Accuracy =', accuracy)

h = history

# plot the loss value
plt.plot(h.history['loss'], label='train loss')
plt.plot(h.history['val_loss'], label='validation loss')
plt.legend()
plt.show()

# plot the accuracy value
plt.plot(h.history['accuracy'], label='train accuracy')
plt.plot(h.history['val_accuracy'], label='validation accuracy')
plt.legend()
plt.show()

input_image_path = input('Path of the image to be predicted: ')

input_image = cv2.imread(input_image_path)

cv2_imshow(input_image)

input_image_resized = cv2.resize(input_image, (128,128))

input_image_scaled = input_image_resized/255

input_image_reshaped = np.reshape(input_image_scaled, [1,128,128,3])

input_prediction = model.predict(input_image_reshaped)

print(input_prediction)


input_pred_label = np.argmax(input_prediction)

print(input_pred_label)


if input_pred_label == 1:

  print('The person in the image is wearing a mask')

else:

  print('The person in the image is not wearing a mask')

model.save("face_mask_detection_model.keras")

from google.colab import files
files.download("face_mask_detection_model.keras")

"""## **Conclusion**  
In this project, we built and trained a Convolutional Neural Network (CNN) to detect whether a person is wearing a mask or not.  

- Images were loaded and preprocessed into a standard format.  
- A CNN model was designed with convolution, pooling, dense, and dropout layers.  
- The model was compiled and trained with accuracy as the main metric.  
- Finally, the trained model was tested on new images to make predictions.  

This structured workflow demonstrates a practical deep learning solution for face mask detection.  

"""

